name: CMake Build Matrix

# Процесс запускается только вручную (кнопка Actions).
on: workflow_dispatch

# Окружение - версии используемых инструментов, тип сборки, зеркала Qt
env:
  QT_VERSION: 6.9.2
  MACOS_DEPLOYMENT_TARGET: 11.0
  CLANG_VERSION: 20.1.3
  CMAKE_VERSION: 3.30.3
  NINJA_VERSION: 1.10.2
  # Существуют следующие типы сборки:
  # Debug - с отладочной информацией, с отладочным выводом, с использованием механизма assert, без оптимизации;
  # Release - без отладочной информации, с оптимизацией скорости исполнения;
  # RelWithDebInfo - с отладочной информацией, с оптимизацией скорости исполнения;
  # MinSizeRel - без отладочной информации, с оптимизацией размера.
  BUILD_TYPE: Release
  # Существуют следующие уровни детализации выводимых сообщений:
  # FATAL_ERROR - серьёзная ошибка, вызывающая полную остановку сборки;
  # SEND_ERROR - серьёзная ошибка, вызывающая остановку сборки без остановки выполнения скрипта Cmake;
  # WARNING - предупреждение;
  # AUTHOR_WARNING - предупреждение разработчика;
  # DEPRECATION - ошибка или предупреждение об использовании устаревшей функции Cmake;
  # NOTICE - важное сообщение, выводимое на устройство stderr;
  # STATUS - краткое важное сообщение;
  # VERBOSE - подробная информация об особенностях сборки;
  # DEBUG - подробная информация, необходимая только разработчику;
  # TRACE - сообщение о ходе сборки для точного отслеживания процесса.
  # Выводятся сообщения от указанного уровня (включая) и выше.
  LOG_LEVEL: DEBUG
  # URL зеркал с установочными архивами Qt, перечислены через точку с запятой. 
  QT_MIRRORS: download.qt.io;mirrors.ocf.berkeley.edu/qt;ftp.fau.de/qtproject;mirrors.sau.edu.cn/qt;mirrors.ukfast.co.uk/sites/qt.io

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "windows-x64-msvc",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "linux-x64",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "macOS 13 Clang", artifact: "macos-13",
            os: macos-13,
            cc: "clang", cxx: "clang++"
          }
        - {
            name: "macOS Latest Clang", artifact: "macos-universal",
            os: macos-latest,
            cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v4

    - name: Установка субмодулей из других репозиториев
      id: git
      shell: cmake -P {0}
      run: |

        #execute_process(COMMAND git submodule set-url -- perfparser https://code.qt.io/qt-creator/perfparser.git)
        #execute_process(COMMAND git submodule update --init --recursive)
        file(MAKE_DIRECTORY release)
        if (${{github.ref}} MATCHES "tags/v(([0-9.]+).*)")
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${CMAKE_MATCH_1}\n")
        else()
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${{github.run_id}}\n")
        endif()

    - name: Загрузка Ninja и CMake
      shell: cmake -P {0}
      run: |

        set(cmake_version "$ENV{CMAKE_VERSION}")
        set(ninja_version "$ENV{NINJA_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        foreach(retry RANGE 10)
          file(DOWNLOAD "${ninja_url}" ./ninja.zip)
          file(SIZE ./ninja.zip fileSize)
          if (fileSize GREATER 0)
            break()
          endif()
        endforeach()

        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        foreach(retry RANGE 10)
          file(DOWNLOAD "${cmake_url}" ./cmake.zip)
          file(SIZE ./cmake.zip fileSize)
          if (fileSize GREATER 0)
            break()
          endif()
        endforeach()
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Добавить путь к CMake к переменной окружения PATH
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

        # Установить атрибут "исполняемости" для линуксоподобных систем
        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Установка системных библиотек
      shell: cmake -P {0}
      run: |

        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt update
          )
          execute_process(
            COMMAND
              sudo apt install chrpath
                               libgl1-mesa-dev libvulkan-dev libxcb-xinput-dev libxcb-xinerama0-dev libxkbcommon-dev libxkbcommon-x11-dev
                               libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xkb1 libxcb-randr0 libxcb-icccm4 libsecret-1-dev
                               xvfb libpulse-dev
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Не удалось установить зависимости")
          endif()
        endif()

        if ("${{ runner.os }}" STREQUAL "Windows")
          file(MAKE_DIRECTORY build/build/bin)
          set(opengl_sw_url "https://\${qt_mirror}/development_releases/prebuilt/llvmpipe/windows/opengl32sw-64.7z")
          foreach(qt_mirror $ENV{QT_MIRRORS})
            foreach(retry RANGE 10)
              cmake_language(EVAL CODE "
                message(\"Загрузка ${opengl_sw_url}\")
                file(DOWNLOAD \"${opengl_sw_url}\" ./opengl32sw-64.7z)
              ")
              file(SIZE ./opengl32sw-64.7z fileSize)
              if (fileSize GREATER 0)
                break()
              endif()
            endforeach()

            # Check to see if we have the file, if not, go to next mirror
            file(SIZE ./opengl32sw-64.7z fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../../../opengl32sw-64.7z WORKING_DIRECTORY build/build/bin)
        endif()

        if (NOT "x${{ matrix.config.toolchain }}" STREQUAL "x")
          foreach(qt_mirror $ENV{QT_MIRRORS})
            foreach(retry RANGE 10)
              cmake_language(EVAL CODE "
                message(\"Загрузка ${{ matrix.config.toolchain }}\")
                file(DOWNLOAD \"${{ matrix.config.toolchain }}\" ./toolchain.7z)
              ")
              file(SIZE ./toolchain.7z fileSize)
              if (fileSize GREATER 0)
                break()
              endif()
            endforeach()

            # Check to see if we have the file, if not, go to next mirror
            file(SIZE ./toolchain.7z fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./toolchain.7z)
        endif()

    - name: Загрузка Qt
      id: qt
      shell: cmake -P {0}
      run: |

        set(qt_version "$ENV{QT_VERSION}")

        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          set(compiler_id "win64_msvc2022_64")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(compiler_id "linux_gcc_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(compiler_id "clang_64")
        endif()

        set(qt_base_url "https://\${qt_mirror}/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}/qt6_${qt_version_dotless}")
        foreach(qt_mirror $ENV{QT_MIRRORS})
          foreach(retry RANGE 10)
            cmake_language(EVAL CODE "
              message(\"Загрузка ${qt_base_url}/Updates.xml}\")
              file(DOWNLOAD \"${qt_base_url}/Updates.xml\" ./Updates.xml)
            ")
            file(SIZE ./Updates.xml fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()

          # try the next mirror if we didn't manage to get an Updates.xml file
          file(SIZE ./Updates.xml fileSize)
          if (fileSize EQUAL 0)
            continue()
          endif()

          file(READ ./Updates.xml updates_xml)
          # get the package sections, only for given compiler, without the "debug info" ones
          string(REGEX REPLACE "<PackageUpdate>" ";<PackageUpdate>" sections "${updates_xml}")
          list(FILTER sections EXCLUDE REGEX "<Name>.*debug.*</Name>")
          list(FILTER sections INCLUDE REGEX "<Name>.*${compiler_id}.*</Name>")

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt/" qt_dir)
          file(APPEND "$ENV{GITHUB_OUTPUT}" "qt_dir=${qt_dir}")

          function(get_sub_url outvar module)
            set(filtered ${sections})
            list(FILTER filtered INCLUDE REGEX "<DownloadableArchives>.*${module}.*</DownloadableArchives>")
            list(LENGTH filtered count)
            if (count LESS 1)
              set(${outvar} "<notfound>" PARENT_SCOPE)
              return()
            endif()
            list(GET filtered 0 section)
            string(REGEX MATCH "<Name>(.*)</Name>" match "${section}")
            set(name ${CMAKE_MATCH_1})
            string(REGEX MATCH "<Version>(.*)</Version>" match "${section}")
            set(version ${CMAKE_MATCH_1})
            string(REGEX MATCH "<DownloadableArchives>.*(${module}[^,]+).*</DownloadableArchives>" match "${section}")
            set(archive ${CMAKE_MATCH_1})
            set(${outvar} "${name}/${version}${archive}" PARENT_SCOPE)
          endfunction()

          message("Загрузка Qt в ${qt_dir}")
          # Загрузка и разжатие файлов типа ${module}.7z
          function(downloadAndExtract module subdir)
            file(MAKE_DIRECTORY "${qt_dir}/${subdir}")
            set(archive "${module}.7z")
            get_sub_url(sub_url ${module})
            set(url "${qt_base_url}/${sub_url}")
            foreach(retry RANGE 10)
              cmake_language(EVAL CODE "
                message(\"Загрузка модуля ${module} из ${url}\")
                file(DOWNLOAD \"${url}\" \"$ENV{GITHUB_WORKSPACE}/${archive}\")
              ")
              file(SIZE "$ENV{GITHUB_WORKSPACE}/${archive}" fileSize)
              if (fileSize GREATER 0)
                break()
              endif()
            endforeach()
            message("... разжатие в ${qt_dir}/${subdir}")
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "$ENV{GITHUB_WORKSPACE}/${archive}" WORKING_DIRECTORY "${qt_dir}/${subdir}" OUTPUT_QUIET)
          endfunction()

          # Обязательные:
          # +base (Core, Gui, Widgets) OpenGL +serialport Qml OpenGLWidgets  UiTools Quick +multimedia(Multimedia, MultimediaWidgets)

          foreach(package qtbase qtdeclarative qttools qtsvg qttranslations qtimageformats qtmultimedia qtserialport qtquicktimeline qtquick3d qt5compat qtshadertools)
            downloadAndExtract(${package} "")
          endforeach()

          # uic depends on libicu*.so
          if ("${{ runner.os }}" STREQUAL "Linux")
            downloadAndExtract("icu" "lib")
          endif()

          # Work is done, no need to try the next mirror.
          break()
        endforeach()

        if ("${{ runner.os }}" STREQUAL "Windows")
          # для Windows поместить системные библиотеки в директорию Qt, чтобы их было проще собрать в установочный пакет
          foreach(file vcruntime140.dll concrt140.dll msvcp140_1.dll msvcp140_2.dll
                       msvcp140_codecvt_ids.dll vcruntime140_1.dll msvcp140.dll)
            file(INSTALL "C:/Windows/System32/${file}"
                 DESTINATION "qt/bin")
          endforeach()
        endif()

    - name: Настройка среды сборки, конфигурирование и сборка при помощи CMake
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        set(ENV{MACOSX_DEPLOYMENT_TARGET} "${{ env.MACOS_DEPLOYMENT_TARGET }}")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          message(NOTICE "Настройка окружения MSVC (сборка под Windows)")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        find_package(Vulkan)

        # При необходимости добавить к переменной окружения PATH путь к инструментам
        if (NOT "x${{ matrix.config.toolchain_path }}" STREQUAL "x")
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}/${{ matrix.config.toolchain_path }}${path_separator}$ENV{PATH}")
        endif()

        if ("${{ runner.os }}" STREQUAL "macOS")
            if (${{github.ref}} MATCHES "tags/v(.*)")
                set(ENV{CMAKE_OSX_ARCHITECTURES} "x86_64;arm64")
            else()
                set(ENV{CMAKE_OSX_ARCHITECTURES} "x86_64")
            endif()
        endif()

        # Если задан, установить уровень детализации выводимых сообщений
        set(build_type "$ENV{BUILD_TYPE}")
        if(DEFINED ENV{LOG_LEVEL}) 
          set(log_level "--log-level=$ENV{LOG_LEVEL}")
        endif()

        # Установить символ-разделитель директорий, принятый в ОС
        set(path_slash "/")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_slash "\\")
        endif()

        # В переменную окружения QT_ROOT поместить путь к Qt
        set(ENV{QT_ROOT} "$ENV{GITHUB_WORKSPACE}${path_slash}qt")
        # В переменную окружения BUILDDIR поместить путь к промежуточным и собранным файлам
        set(ENV{BUILDDIR} "$ENV{GITHUB_WORKSPACE}${path_slash}build")

        # Вызвать CMake с необходимыми аргументами для конфигурирования (не мультиконфигурационный генератор)
        execute_process(
          COMMAND cmake
          -S $ENV{GITHUB_WORKSPACE}
          -B $ENV{GITHUB_WORKSPACE}${path_slash}cmake
          -G Ninja
          ${log_level}
          -D CMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
          -D CMAKE_C_COMPILER=${{ matrix.config.cc }}
          -D CMAKE_BUILD_TYPE=${build_type}
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )

        # Проверить полученный код завершения, в случае ошибки дать сообщение
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "-- Конфигурирование завершено с ошибкой. Выход.")
        endif()

        # Вызвать CMake для сборки приложения с необходимыми аргументами
        execute_process(
          COMMAND cmake
          --build $ENV{GITHUB_WORKSPACE}${path_slash}cmake
          --parallel
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )

        # Проверить полученный код завершения, в случае ошибки дать сообщение
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "-- Сборка завершена с ошибкой. Выход.")
        endif()

        # Вызвать CMake для формирования установочного набора приложения с необходимыми аргументами
        execute_process(
          COMMAND cmake
          --install $ENV{GITHUB_WORKSPACE}${path_slash}cmake
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )

        # Проверить полученный код завершения, в случае ошибки дать сообщение
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "-- Установка завершена с ошибкой. Выход.")
        endif()

        # Вызвать CMake для формирования установочных пакетов
        execute_process(
          COMMAND cmake
          --build $ENV{GITHUB_WORKSPACE}${path_slash}cmake
          --target package
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )

        # Проверить полученный код завершения, в случае ошибки дать сообщение
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "-- Формирование установочных пакетов завершено с ошибкой. Выход.")
        endif()

    - name: Отдать установочный пакет DEB для Linux
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        path: build/packaging/SvgToRaster-1.0-Linux.deb
        name: SvgToRaster-${{ matrix.config.os }}.deb

    - name: Отдать установочный пакет NSIS для Windows
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        path: build/packaging/SvgToRaster-1.0-win64.exe
        name: SvgToRaster-${{ matrix.config.os }}.exe

    - name: Отдать установочный пакет ZIP для Windows
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        path: build/packaging/SvgToRaster-1.0-win64.zip
        name: SvgToRaster-${{ matrix.config.os }}.zip

    - name: Отдать установочный образ DMG для MacOS
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        path: build/packaging/SvgToRaster-1.0-Darwin.dmg
        name: SvgToRaster-${{ matrix.config.os }}.dmg

#    - name: Создать релиз
#      id: create_release
#      uses: softprops/action-gh-release@v2
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: v${{ needs.build.outputs.tag }}
#        body_path: release/changelog.md
#        files: |

#        draft: false
#        prerelease: false
